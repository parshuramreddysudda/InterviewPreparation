from typing import List


# Function to find the smallest missing positive integer
def smallest_missing_positive_integer(nums: List[int]) -> int:
    # Implement your solution here

    i = 0
    length = len(nums)
    while i < length:
        val = nums[i] - 1
        if 0 <= val < length and nums[i] != nums[val]:
            nums[val], nums[i] = nums[i], nums[val]
        else:
            i += 1
    minPos = 1
    cur = 0
    while cur < length:
        if nums[cur] != minPos:
            cur += 1
        else:
            cur += 1
            minPos += 1

    return minPos
    pass


# Test cases
def test_smallest_missing_positive_integer():
    def validate(input_nums, expected_output):
        result = smallest_missing_positive_integer(input_nums)
        assert result == expected_output, f"Failed for {input_nums}: expected {expected_output}, got {result}"

    validate([197,717,223,641,307,225,381,179,668,135,309,648,508,514,733,207,496,102,275,91,493,639,209,531,296,254,270,604,361,781,347,126,417,389,380,462,355,62,229,216,566,117,638,210,587,187,139,217,621,480,642,765,572,180,195,30,109,295,596,637,768,423,571,754,10,220,329,422,767,141,205,311,371,79,147,690,511,94,159,242,445,42,515,365,484,454,580,123,48,306,418,471,569,629,227,465,771,151,659,449,314,449,577,424,37,245,351,189,425,460,351,400,497,333,160,798,746,308,28,326,353,56,554,673,386,743,15,364,32,555,539,784,359,615,69,520,464,472,738,294,40,594,34,535,435,541,288,700,282,213,735,491,444,286,459,277,588,426,259,526,221,185,764,586,721,421,775,22,649,618,374,571,356,591,474,11,49,513,507,186,660,617,567,469,566,529,750,160,61,208,393,557,4,264,110,682,147,438,258,505,644,192,55,483,229,233,158,111,742,677,692,298,159,86,554,337,773,130,553,680,285,683,503,212,188,495,653,31,167,315,440,98,115,382,27,642,373,204,154,558,154,297,442,457,310,445,12,616,416,279,256,127,732,715,17,87,692,766,265,51,600,691,190,658,479,25,374,399,367,743,187,415,383,6,749,266,796,633,165,204,51,124,767,681,197,169,108,191,201,373,3,655,361,178,796,232,334,119,85,163,315,38,665,621,150,147,455,752,251,73,4,772,574,354,728,744,391,59,1,800,537,767,15,57,637,15,723,41,236,560,498,193,168,465,473,366,463,375,640,709,4,108,474,722,702,701,782,542,350,6,33,610,255,78,49,20,591,265,71,329,576,776,562,509,490,269,196,501,736,546,470,475,581,662,293,170,164,308,517,568,689,789,420,760,348,712,26,500,178,369,443,95,174,400,445,738,652,360,287,324,66,679,570,92,704,301,565,95,104,290,691,16,642,193,757,458,237,316,216,4,650,337,643,692,533,82,138,29,667,197,190,547,44,343,397,45,360,599,148,578,6,129,628,801,519,446,650,53,654,674,720,788,442,703,349,711,95,536,319,779,793,345,55,597,747,410,554,240,18,47,114,411,725,407,408,753,144,488,243,331,591,43,335,540,669,541,611,801,266,239,394,551,559,472,636,791,784,322,2,518,464,555,254,432,717,461,733,351,452,524,636,770,389,176,5,22,260,622,202,620,77,279,609,575,358,113,414,512,320,105,450,607,385,166,152,693,281,247,134,83,93,603,384,284,760,219,431,131,218,711,707,800,693,304,328,107,590,441,780,492,287,342,352,799,143,461,720,751,313,630,101,605,413,433,700,305,125,695,88,510,797,28,318,401,223,494,6,611,595,155,14,293,502,783,494,96,291,734,485,301,390,186,585,206,714,118,453,442,785,710,589,439,172,495,429,450,70,656,739,257,761,144,579,408,645,584,283,75,486,248,771,688,654,785,719,476,378,666,325,403,683,52,231,36,784,606,638,556,170,60,745,516,224,276,92,272,758,670,467,25,719,468,43,740,481,81,269,181,780,253,336,667,436,504,502,223,608,715,698,490,532,442,623,600,795,129,506,228,9,600,548,431,298,596,545,173,161,601,657,226,696,90,4,154,374,672,276,426,262,162,641,691,685,338,246,198,189,304,330,392,344,221,593,183,182,317,229,116,778,697,646,488,489,255,40,6,241,790,708,775,456,599,58,430,64,575,200,573,626,564,740,709,792,158,301,661,80,23,116,419,156,405,774,671,404,289,316,769,363,737,478,99,252,153,477,395,238,21,282,427,292,448,20,79,131,765,550,236,756,442,786,549,637,194,100,435,304,728,63,203,611,587,319,300,126,79,237,528,5,437,274,142,352,331,727,191,583,140,625,592,35,663,346,368,84,175,97,684,159,265,474,122,451,73,222,611,521,796,145,130,398,499,95,295,731,737,449,128,74,271,356,794,619,268,204,163,544,273,631,410,402,214,607,40,706,235,341,101,759,664,564,312,648,730,459,543,592,428,466,186,89,406,121,678,27,110,762,412,375,445,517,613,72,561,76,703,138,713,718,153,299,638,19,35,250,279,571,687,223,173,800,388,137,414,112,280,211,302,635,154,785,37,527,8,377,230,525,132,378,126,779,184,293,534,405,701,323,538,686,538,745,793,304,219,229,778,249,301,108,777,425,65,332,448,441,447,763,200,726,434,270,583,745,146,632,117,574,103,657,615,745,614,675,522,362,86,396,774,39,340,46,750,223,215,346,348,387,199,77,487,136,748,787,244,724,67,243,482,634,409,265,379,326,35,372,248,598,321,572,582,234,716,602,251,617,653,120,376,374,264,729,54,24,446,719,530,563,593,651,478,62,229,591,756,705,526,137,780,790,339,728,624,149,359,303,656,263,157,523,552,699,106,133,7,68,676,364,343,124,742,757,755,591,357,491,647,170,327,775,455,492,13,267,230,171,678,278,50,139,629,357,425,729,177,352,741,531,7,261,788,97,612,627,96,370],694)
    # Test case 1: Basic case
    # validate([1, 2, 0], 3)

    # Test case 2: Missing 1
    validate([3, 4, -1, 1], 2)

    # Test case 3: All negatives
    validate([-1, -2, -3], 1)

    # # Test case 4: Sequential positive starting from 2
    validate([2, 3, 4], 1)

    # Test case 5: Duplicates and disorder
    validate([7, 8, 9, 11, 12], 1)

    # Test case 6: Mixed valid and invalid entries
    validate([1, 1, 2, 2, 3, 3, -1, 0], 4)
    #
    # Test case 7: Large but missing small
    validate([100, 101, 102], 1)

    # Test case 8: Already complete sequence
    validate([1, 2, 3], 4)


    print("All test cases passed!")


# Run test cases
if __name__ == "__main__":
    test_smallest_missing_positive_integer()
