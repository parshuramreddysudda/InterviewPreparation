import heapq
from collections import Counter


def largest_palindrome(num):
    if len(num) == 1:
        return num

    maps = Counter(num)

    # keys = sorted(maps.keys())
    # keys.reverse()
    first = ""
    middle = ''
    for k in range(9, -1, -1):
        number = str(k)
        if number in maps:
            times = maps.get(number)
            print("Value is ", number, " Times is ", times)
            if times > 1:
                if number == '0' and first == '':
                    if len(middle) == 0:
                        middle = '0'
                    continue
                first += number * int(times / 2)
                if middle == '' and times % 2 != 0:
                    middle = number
            elif middle == '':
                middle = number

    # if first == '' or middle == '' and '0' in maps:
    #     return '0'
    return first + middle + first[::-1]


def main():
    numbers

    for i in range(len(numbers)):
        print(i + 1, '.', '\tGiven number: "', numbers[i], '"', sep='')
        result = largest_palindrome(numbers[i])
        expected = "9999999999999999999998888888888888888888777777777777777776666666666666666666655555555555555444444444444444444444433333333333333333222222222222222222111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111112222222222222222223333333333333333344444444444444444444445555555555555566666666666666666666777777777777777778888888888888888888999999999999999999999"

        if result == expected:
            print("Result is same")
        else:
            print("Result is false")
        print('\n\tThe largest palindromic number: "', result, '"', sep='')
        print('-' * 100)


if __name__ == '__main__':
    main()
